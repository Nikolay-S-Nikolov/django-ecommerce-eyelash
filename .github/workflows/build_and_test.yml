on:
  push:
    branches: [ "2-create-product-app-and-implement-crud-operations-for-staff-users" ]
  pull_request:
    branches: [ "2-create-product-app-and-implement-crud-operations-for-staff-users" ]

jobs:
  build_and_test:
    name: Build and Test Django app
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_NAME: test_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      SECRET_KEY: test-secret-key
      DEBUG: True
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Dependencies
      run: pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        for i in {1..12}; do
          if pg_isready -h localhost -U postgres -d test_db; then
            echo "Postgres is ready!"
            break
          fi
          echo "Waiting for postgres ($i/12)..."
          sleep 1
        done

    - name: Run migrations
      run: python manage.py migrate --noinput

    - name: Run tests
      run: python manage.py test